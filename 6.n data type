# 6.n data type

**동적 타이핑**

**동적 타입 언어와 정적 타입 언어**

자바스크립트의 모든 값은 데이터 타입을 갖는다고 했다

변수는 데이터 타입을 가질까?(갖지 않는다)

C나 자바 같은 정적 타입 언어는 변수를 선언 할 때 변수에 할당 할 수 있는 값의 종류,

즉 데이터 타입을 사전에 선언해야 한다 (이것을 명시적 타입 선언 이라고 한다.)

*예*

C에서 정수 타입의 변수를 선언하는 예시

정적 타입 언어는 변수의 타입을 **변경할수없으며 변수에 선언한 타입에 맞는 값만 할당할수있다**

정적 타입 언어는 컴파일 시점에 **타입 체크를 수행**한다.

만약 **타임 체크**를 **통과하지 못한 경우** **에러를 발생 시키고 프로그램의 실행 자체를 막는다**

이를 통해 타입의 **일관성을 강제하므로 써 더욱더 안정적인 코드의 구현을 통해 런타임에 발생하는 에러를 줄인다.**

자바스크립트는 **정적 타입 언어와 다르게 변수를 선언 할 때 타입을 선언하지 않**는다

다만 **var, let, const 키워드를 사용해 선언할 뿐**이다.

자바스크립트의 변수는 정적 타입 언어와 같이 미리 선언한 데이터의 값만 할당 할 수 있는 것이 아니다. 어떤 값이라도 자유롭게 할당 할 수 있다.

**typeof연산자로 변수의 데이터 타입을 조사해보자**

typeof연산자는 연산자 뒤에 위치한 피 연산자의 데이터 타입을 문자열로 나열한다.

typeof연산자로 변수를 연산하면 **변수의 데이터 타입을 반환**한다.

즉 변수의 데이터 타**입을 반환하는 것이 아닌** **변수에 할당된 값의 타입을 반환 하는 것**이다.

자바스크립트 **변수에는 어떤 데이터 타입의 값이라도 자유롭게 할당 할 수 있**으므로

정적 타입 언어에서 말하는 데이터 타입과 개념이 다르다.

값**을 할당하는 시점에 변수의 타입이 동적으로 결정되고 변수의 타입을 언제든지 바꿔줄 수 있다**.

**동적 타이핑**

- 자바스크립트의 변수 선언이 아닌 할당의 의해 타입이 결정된다 그리고 재할당의 의해

**변수의 타입을 언제든지 동적으로 변할 수 있다.**

자바스크립트를 정적 타입 언어와 구별 하기 위해 동적 타입 언어 라고 한다.

**typeof연산자**

- **변수의 타입을 조사 할 때 사용한다**
- **결과는 문자열이다**

(뒤에 어떤 피연산자가 있는지에 따라 값이 달라진다.)

```jsx

foo = ????? ;

console.log(typeof foo); // ?? 안에 무엇이 있느냐에 따라 값이 달라진다
```

```jsx
var foo;//undefined

3;, 3.14;//number

'Hello';//string

true;, false; //boolean

null; //object

Symbol(); //symbol

{};///object

[];///object

function() {} ; //function
```

**산술 연산자**

: **피연산자를 대상**으로 **수학적 계산을 수행해 새로운 값을 만든다**.

산술 연산이 **불가능 한 경우 NaN을 반환**한다.

산술 연산자는 피연산자의 개수에 따라 **이항 산술 연산자**와 **단항 산술 연산자**로 구분할 수 있다

**이항 산술 연산자**

: **2개의 피연산자를 산술 연산 하여 숫자 값을 만든다.**

모든 이항 산술 연산자는 피연산자의 **값을 변경하는 부수 효과가 없다**.

어떤 산술을 해도 피연산자의 값이 바뀌는 경우가 없도 **언제나 새로운 값을 만들어 낸다.**

| + | 덧셈 |
| --- | --- |
| - | 뺄셈 |
| + | 곱셈 |
| / | 나눗셈 |
| % | 나머지 |

**단항 산술 연산자** 

: **1개의 피연산자**로 **산술 연산**하여 **숫자를 만든다**(항목이 1개인 연산자)

**증가/감소(++/ - -)연산자**는 **피연산자의 값을 변경하는 부수효과가 있다**.

**연산을 하면 피연산자의 값을 변경하는 암묵적 할당이 이루어 진다.**

증가/감소(++/ - -)연산자는 **위치에 의미가있다**

| ++ | 증가 |
| --- | --- |
| - - | 감소 |
| + | 효과 없음. 음수를 양수로 반전하지 않는다  |
| - | 양수를 음수로,   음수를 양수로 반전한 값을 반환 한다. |

+a, --a **먼저 값을 증/감소 시킨후 다른 연산을 수행 한다**

a++, a-- **먼저 연산을 수행 후 값을 증/감소 시킨다**

+단항 연산자는 **어떤 효과도 없다**.

```jsx
+10; //-> 10
+(-10); //-> -10
```

-단항 연사자는 피연산자의 **부호를 반전 한 값을 반환 한다**.

```jsx
-(10); // -> 10
-true; //-> -1 불리언타입을 숫자 타입으로 변환
-'10'; //-> 10
-'Hello'; //-> NaN 문자열은 숫자로 변환이 불가능 하다

```
